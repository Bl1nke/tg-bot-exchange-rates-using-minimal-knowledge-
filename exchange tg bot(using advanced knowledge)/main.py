import requests
from config import TOKEN, API_KEY_CRYPTO, URL_CBR, URL_CRYPTO, CRYPTO_CURRENCIES, FIAT_CURRENCIES
from telebot import types, TeleBot
import logging
from datetime import datetime, timedelta
import time


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


bot = TeleBot(TOKEN)


crypto_data = None
fiat_data = None
last_updated = None


CRYPTO_BUTTONS = {
    "‚Çø –ë–∏—Ç–∫–æ–π–Ω": ("bitcoin", "usd"),
    "ETH –≠—Ñ–∏—Ä": ("ethereum", "usd"),
    "TET –¢–µ–¥–µ—Ä": ("tether", "usd"),
}

FIAT_BUTTONS = {
    "üçî –î–æ–ª–ª–∞—Ä –°–®–ê": ("USD", "Value"),
    "üè∞ –ï–≤—Ä–æ": ("EUR", "Value"),
    "üíÇ –§—É–Ω—Ç—ã –°—Ç–µ—Ä–ª–∏–Ω–≥–∞": ("GBP", "Value"),
    "üèéÔ∏è –î–∏—Ä—Ö–∞–º": ("AED", "Value"),
    "üê≤ –Æ–∞–Ω—å": ("CNY", "Value"),
    "üáµüá± –ó–ª–æ—Ç–∞": ("PLN", "Value"),
    "üáπüá∑ –õ–∏—Ä–∞": ("TRY", "Value"),
}


def fetch_crypto_rates():
    params = {
        "ids": ",".join(CRYPTO_CURRENCIES),
        "vs_currencies": "usd,eur"
    }
    headers = {"x-cg-demo-api-key": API_KEY_CRYPTO}
    
    try:
        response = requests.get(URL_CRYPTO, params=params, headers=headers, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        return None

def fetch_fiat_rates():
    try:
        response = requests.get(URL_CBR, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
        return None

def update_rates():
    global crypto_data, fiat_data, last_updated
    try:
        crypto_data = fetch_crypto_rates()
        fiat_data = fetch_fiat_rates()
        if crypto_data is None or fiat_data is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API")
        last_updated = datetime.now()
        logger.info("–î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
        return False

def get_rates():
    global last_updated
    if not last_updated or (datetime.now() - last_updated) > timedelta(minutes=5):
        if not update_rates():
            return None, None
    return crypto_data, fiat_data


@bot.message_handler(commands=["start"])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_fiat = types.KeyboardButton("üè¶ –í–∞–ª—é—Ç—ã —Å—Ç—Ä–∞–Ω")
    btn_crypto = types.KeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
    markup.add(btn_fiat, btn_crypto)

    bot.send_message(
        message.chat.id,
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "üè¶ –í–∞–ª—é—Ç—ã —Å—Ç—Ä–∞–Ω")
def show_fiat_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(text) for text in FIAT_BUTTONS]
    buttons.append(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
    markup.add(*buttons)

    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == "ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
def show_crypto_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [types.KeyboardButton(text) for text in CRYPTO_BUTTONS]
    buttons.append(types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
    markup.add(*buttons)

    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text in CRYPTO_BUTTONS)
def handle_crypto_currency(message):
    crypto_data, _ = get_rates()
    
    if not crypto_data:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    crypto, currency = CRYPTO_BUTTONS[message.text]
    try:
        rate = crypto_data[crypto][currency]
        bot.send_message(
            message.chat.id,
            f"{message.text.split()[1]}: {rate} {currency.upper()}"
        )
    except KeyError:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç—Ç–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

@bot.message_handler(func=lambda message: message.text in FIAT_BUTTONS)
def handle_fiat_currency(message):
    _, fiat_data = get_rates()
    
    if not fiat_data:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    currency, key = FIAT_BUTTONS[message.text]
    try:
        rate = fiat_data["Valute"][currency][key]
        bot.send_message(
            message.chat.id,
            f"{message.text.split()[1]}: {rate} —Ä—É–±."
        )
    except KeyError:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç—Ç–æ–π –≤–∞–ª—é—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

@bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
def handle_back(message):
    send_welcome(message)


if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    if not update_rates():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö")

    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)
            time.sleep(5)